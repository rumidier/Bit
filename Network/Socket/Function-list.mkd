start ~ 123p
### bzero, bcopy, bcmp

```
#include <strings.h>
void bzero(void *s, size_t n);
int bcmp(const void *s1, const void *s2, size_t n);
void bcopy(const void *src, void *dest, size_t n);
```

code

```
#include <string.h>
#include <stdio.h>

int
main (int argc,
      char *argv[])
{
  int i;
  char str1[] = "hello world";
  char str2[] = "hello test";

  printf ("bcmp : %d\n", bcmp(str1, str2, 5));
  printf ("bcmp : %d\n", bcmp(str1, str2, 7));

  bzero(str1,5);
  for (i=0; i<11; i++)
    {
      if (str1[i] == 0)
        printf("%d", i);
      else {
        putchar(str1[i]);
      }
    }
  printf("\n");

  bcopy(str2, str1, 5);
  printf("str1: %s\n", str1);

  return 0;
}
```


### memset, memcpy, memcmp

```
#include <string.h>
void *memset(void *s, int c, size_t n);
void *memcpy(void *s1, const void *s2, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
```

code

```
#include <string.h>
#include <stdio.h>

int
main (int argc,
      char *argv[])
{
  int i;
  char str1[] = "hello world";
  char str2[] = "hello test";

  printf ("bcmp : %d\n", memcmp(str1, str2, 5));
  printf ("bcmp : %d\n", memcmp(str1, str2, 7));

  memset(str1, 0, 5);
  for (i=0; i<11; i++)
    {
      if (str1[i] == 0)
        printf("%d", i);
      else {
        putchar(str1[i]);
      }
    }
  printf("\n");

  memcpy(str1, str2, 5);
  printf("str1: %s\n", str1);

  return 0;
}
```

inet_aton

inet_addr

inet_ntoa



gethostbyname

gethostbyaddr

uname
gethostname











socket

bind

getsockname

### NAME
##### socket
### SYNOPSIS
```
#include <sys/socket.h>
int socket(int family, int type int protocol);
```
### RETURN VALIE

##### nonnegative descriptor if OK, -1 on error

Protocol Family

AF_INET : Internet(IPv4) protocol
AF_INET6: IPv6 protocol
AF_LOCAL: Unix domain protocol
AF_ROUTE: Routing sockets
AF_KEY: IPv6 Key socket


Socket Type

SOCK_STREAM : Stream socket
  - 스트림 방식의 소켓 생성
  - UNIX의 파이프 개념과 동일
  - 연결형(스트림) 서비스 선택 시 사용
  - 메시지 경계가 유지되지 않음
  - 전달된 순서대로 수신됨
  - 전송된 모든 데이터는 에러없이 원격지에 도달

SOCK_DGRAM : Dataram socket
  - 데이터그램 방식의 소켓 생성
  - 개별적으로 주소가 쓰여진 패킷 전송 시 사용
  - 비연결형(데이터그램) 서비스 선택 시 사용
  - 패킷은 전달된 순서대로 수신되지 않음
  - 에러복구를 하지 않음(즉, 신뢰성이 없음)
  - 데이터그램 패킷의 크기 제한

SOCK_RAW: Raw socket
  - RAW 모드의 소켓 생성
  - 직업 IP 계층을 이용

### NAME
##### bind
### SYNOPSIS
```
#include <sys/socket.h>
int bind(int sockfd, const struct sockaddr *myaddr, socklen_t addrlen);

### RETURN VALUE
### return: o if OK, -1 on error
```

### NAME
##### getpeername
### SYNOPSIS
```
#include <sys/socket.h>
int getpeername(int s, struct sockaddr *name, socklen_t *namelen);
```
### RETURN VALUE
##### o if OK, -1 on error

### NAME
##### listen
### SYNOPSIS
```
#include <sys/socket.h>
int listen(int sockfd, int backlog);
```

### RETURN VALUE
##### o if OK, -1 on error

### NAME
##### accept
### SYNOPSIS
```
#include <sys/socket.h>
int accept(int sockfd, struct sockaddr *client, socklen_t *addrlen);
```
### RETURN VALUE
##### nonnegative descriptor if OK, -1 on error

### NAME
##### connect
### SYNOPSIS
```
#include <sys/socket.h>
int connect(int sockfd, const struct sockadde *servaddr, socklen_t addrlen);
```

### NAME
##### close
### SYNOPSIS
```
#include <sys/socket.h>
int close(int sockfd);
```

### RETURN VALUE
#### 0 if OK, -1 on error

### NAME
##### shutdown

### SYNOPSIS
#include <sys/socket.h>
int shutdown(int sockfd, int howto);

### RETURN VALUE
##### 0 if OK, -1 on error

### NAME
##### send, recv, sendto, recvfrom

### SYNOPSIS
#include <sys/socket.h>
#include <sys/types.h>

int send(int sockfd, char *buff, int nbyte, int flag;
int recv (int sockfd, char *buff, int nbytes, int flag);
int sendto (int sockfd, char *buff, int nbytes, int flag, struct sockaddr *to, int addrlen);
int recvfrom (int sockfd, char *buff, int nbytes, int flag, struct sockaddr *from, int *addrlen);

### RETRUN VALUE
##### send or recv bytes if OK, -1 on error
