### SYNOPSIS

sigaction () 함수는 signal()보다 향상된 기능을 제공하는 시그널 처리를 결정하는 함수입니다.

signal()에서는 처리할 행동 정보로 시그널이 발생하면 호출이될 함수 포인터를 넘겨 주었습니다.
그러나 sigaction() 에서는 struct sigaction 구조체 값을 사용하기 때문에 좀 더 다양한 지정이 가능합니다.

```
http://forum.falinux.com/zbxe/?mid=C_LIB&page=2&document_srl=413701

signal.h
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);

int signum 	시그널 번호
struct sigaction *act 	설정할 행동. 즉, 새롭게 지정할 처리 행동
struct sigaction *oldact 	이전 행동, 이 함수를 호출하기 전에 지정된 행동 정보가 입력됩니다.

반환: 0	성공 -1 실패

struct sigaction {
  void (*sa_handler)(int);
  // 시그널을 처리하기 위한 핸들러. SIG_DFL, SIG_IGN 또는 핸들러 함수
  void (*sa_sigaction)(int, siginfo_t *, void *);
  // 밑의 sa_flags가 SA_SIGINFO일때 sa_handler 대신에 동작하는 핸들러
  sigset_t sa_mask;
  // 시그널을 처리하는 동안 블록화할 시그널 집합의 마스크
  int sa_flags;
  // 아래 설명을 참고하세요.
  void (*sa_restorer)(void);
  // 사용해서는 안됩니다.
}
```

##### sigaction() flags

`SA_NOCLDSTOP`

  - `signum`이 `SIGCHILD`일 경우, 자식 프로세스가 멈추었을 때, 부모 프로세스에 `SIGCHILD`가 전달되지 않는다.

`SA_ONESHOT` 또는 `SA_RESETHAND`

  - 시그널을 받으면 설정된 행도을 취하고 시스템 기본 설정인 `SIG_DFL` 로 재설정된다.

`SA_RESTART`

  -	시그널 처리에 의해 방해 받은 시스템 호출은 시그널 처리가 끝나면 재시작한다.

`SA_NOMASK` 또는 `SA_NODEFER`

  - 시그널을 처리하는 동안에 전달되는 시그널은 블록되지 않는다.

`SA_SIGINFO`

이 옵션이 사용되면 `sa_handler`대신에 `sa_sigaction`이 동작되며, `sa_handler` 보다 더 다양한 인수를 받을 수 있습니다.
 `sa_sigaction`이 받는 인수에는 시그널 번호, 시그널이 만들어진 이유, 시그널을 받는 프로세스의 정보입니다. 


## sockaddr_in

### SYNOPSIS

```
#include <netinet/in.h>

struct sockaddr_in {
    short            sin_family;   // e.g. AF_INET
    unsigned short   sin_port;     // e.g. htons(3490)
    struct in_addr   sin_addr;     // see struct in_addr, below
    char             sin_zero[8];  // zero this if you want to
};

struct in_addr {
    unsigned long s_addr;  // load with inet_aton()
};

sin_family :주소 패밀리
  - AF_INET, AF_INET6, AF_LOCAL
sin_port : IP 포트
sin_addr : IP 주소
sin_zero : 구조체를 SOCKADDR과 동일한 크기로 만들기 위한 패팅
```

## sockaddr

### SYSNOPSIS

```
struct sockaddr { 
   unsigned short sa_family; 
   char sa_data[14]; 
};

sa_family : 소켓 주소 패밀리
sa_data : 다른 모든 소켓 주소 구조체의 최대 크기

```

## atoi

10진 정수 문자열을 정수로 변환합니다.

### socket

### SYNOPSIS

```
#include <sys/types.h>
#include <sys/socket.h.

int socket (int domain, int type, int protocol);

int domain : 인터넷을 통해 통신할 지 , 같은 시스템 내에서 프로세스 끼리 통신할 지의 여부를 설정합니다.
  PF_INET, AF_INET : IPv4 인터넷 프로토콜 사용
  PF_INET6 : IPv6 인터넷 프로토콜 사용
  PF_LOCAL, AF_UNIX : 같은 시스템 내에서 프로세스 끼리 통신합니다.
  PF_PACKET : Low level socket 을 인터페이스를 이용합니다.
  PF_IPX    : IPX 노벨 프로토콜을 사용합니다.

int type : 데이터의 전송 형태를 지정하며 아래와 같은 값을 사용할 수 있습니다.
type 설정

TCP 소켓 생성
socket(PF_INET, SOCK_STREAM, 0);
socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);

UDP 소켓 생성
socket(PF_INET, SOCK_DGRAM, 0);
socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
```

### 주소체계 저장

`PF`는 프로토콜 체계를 나타낼때 사용하고 `AF`는 주소 체계(sockaddr_in)나타낼때 사용합니다.
두개의 정보는 같은 상수값을 가지지만 바꾸어서 넣는건 좋지 않습니다.


### htons, htonl, ntohs, ntohl

htons : (Host to network short)
  Host 시스템에서 Network로 short형 데이터를 보낼 때 바이트 오더를 바꾸어 주는 함수
htonl : (Host to network long)
  long 형 데이터의 바이트 오더를 바꾸어 주는 함수
ntohs : (Network to host short)
  Network에서 Host로 short형 데이터의 바이트 오더를 바꾸어주는 함수
ntohl : (Network to host long)
  long 형 데이터의 바이트 오더를 바꾸어주는 함수

### htonl(INADDR_ANY)

주소를 지정해 주는것으로 `inet_addr("내 시스템의 IP")`로도 지정할 수 있지만 프로그램이 실행되는 시스템마다
IP가 다르므로 고정 IP로 하지않고 `htonl(INADDR_ANY)`로 사용합니다.

### bind

소켓에 IP주소와 포트번호를 지정해 줍니다. 이로서 소켓을 통신에 사용할 수 있도록 준비가 됩니다.
http://forum.falinux.com/zbxe/index.php?document_srl=430926&mid=C_LIB

### SYNIPSIS

```
#include <sys/types.h>
#include <sys/socket.h> 
int bind(int sockfd, struct sockaddr *myaddr, socklen_t addrlen); 
int sockfd : 소켓 디스크립터 (socket() 로 연결된 sock 을 뜻함)
struct sockaddr *myaddr : 주소 정보로 인터넷을 이용하는 AF_INET인지 시스템 내에서 통신하는 AF_UNIX에 따라서 달라집니다.

AF_INET

struct sockaddr_in {
    short            sin_family;   // e.g. AF_INET
    unsigned short   sin_port;     // e.g. htons(3490)
    struct in_addr   sin_addr;     // see struct in_addr, below
    char             sin_zero[8];  // zero this if you want to
};

AF_UNIX

struct sockaddr { 
   unsigned short sa_family; 
   char sa_data[14]; 
};

인터넷을 통해 통신하는 AF_INET인 경우에는 struct sockaddr_in을 사용합니다. 
socklen_t addrlen 	: myadd 구조체의 크기 (sizeof(echoServAddr))
```

### recvfrom()
UDP/IP 통신에서 소켓으로부터 데이터를 수신합니다.
http://forum.falinux.com/zbxe/index.php?document_srl=441147&mid=C_LIB

### SYNOPSIS

```
#include <sys/types.h>
#include <sys/socket.h>
int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlen); 

int s      : 소켓 디스크립터
void *buf  : 자료 수신을 위한 버퍼 포인터
size_t len : 버퍼의 바이트 단위 길이
int flags  : 수신을 위한 옵션으로 아래의 값을 사용할 수 있습니다.
flags 	옵션 설명
  MSG_OOB       : SOCK_STREAM에만 사용되며 out-of-band 데이터로 전송될 수 있음을 나타냅니다.
  MSG_DONTROUTE : 데이터는 라우팅될 수 없음으로 지정합니다.
  MSG_DONTWAIT  : NONE BLOCKING 통신이 가능하도록 합니다.
  MSG_NOSIGNAL  : 상대방과 연결이 끊겼을 때, SIGPIPE 시그널을 받지 않도록 합니다.
sockaddr *to    : 전송한 곳의 주소 정보
socklen_t tolen : 주조 정보의 크기

반환 : -1 이외 실제 수신한 바이트수
```
